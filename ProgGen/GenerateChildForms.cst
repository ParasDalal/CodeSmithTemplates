<%------------------------------------------------------------------------------------------
* Author: Paras Dalal
* Description: Generate base structure for the data entry win-forms
------------------------------------------------------------------------------------------%>
<%@ CodeTemplate Language="VB" TargetLanguage="VB" Src="" Inherits="" Debug="True" Description="Template description here." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly  Path="D:\SoftProjects\MetaData\MetaData\bin\" Name="MetaData" %>
<%@ Import Namespace="MetaData" %>

<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Optional="False" Category="01. Getting Started - Required" Description="Database that the tables views, and stored procedures should be based on. IMPORTANT!!! If SourceTables and SourceViews are left blank, the Entire Database will then be generated." %>
<%@ Property Name="FilePrefix" Type="System.String" Optional="False" Category="01. Getting Started - Required" Description="Form prefix" %>
<%--@ Property Name="OutputFilePath" Type="System.String" Default="" Optional="False" Category="01. Getting Started - Required" Description="Path for the output file." --%>
<%--@ Property Name="SampleBooleanProperty" Type="System.Boolean" Default="True" Optional="False" Category="Booleans" Description="This is a sample boolean property." --%>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Data.DataView" %>
<%@ Import Namespace="System.IO" %>
<%@ Map Name="DbTypeVB" Src="DbType-VB.csmap" %>
<% For each tbl as tableschema in SourceDatabase.Tables
        if not tbl.HasPrimaryKey  then
            continue for
        end if
        dim ti as MetaData.TableInfo
        dim fi as New Collection
        dim fld as metadata.FieldInfo
        ti = MetaData.TableExtension.getTableInfo(Sourcedatabase.Name, tbl.Name)
        try
            fi = MetaData.FieldExtension.getFieldInfo(Sourcedatabase.Name, tbl.Name)
        catch ex as Exception
            console.WriteLine("Cannot get field information for : {0} Error:" + ex.ToString, tbl.Name)
        end try
        if (ti.TableType is nothing) then
            continue for
        end if
        if Not (ti.TableType is nothing) then
            if ucase(ti.TableType) <> UCase("Child") then
                continue For 
            end if
        end if
        dim isLookup as Boolean = False
        dim isReadOnly as Boolean = False
        dim isHidden as Boolean = False
        dim strLookupTable as String
        dim strDispColumn as String
        dim strValueColumn as String
        dim pkName as String
        dim emptyValue as String
        dim pkDbType as String
        dim parentTable as String = ""
        pkName = tbl.PrimaryKey.MemberColumns(0).Name
        pkDbType = DBTypeVB(tbl.PrimaryKey.MemberColumns(0).DataType.ToString)
        select case DBTypeVB(tbl.PrimaryKey.MemberColumns(0).DataType.ToString)
            case "GUID"
                emptyValue = "GUID.Empty"
            case "Int", "Int32"
                emptyValue = "0"
            case else
                emptyValue = "0"
        end select
        dim offSet as integer = 0
        dim procAfterSave as String = ""
        dim procBeforeSave as String = ""
        dim procAfterCancel as String = ""
        dim procAfterValuesUpdate as String = ""
        dim procBeforeLoad as String = ""
        dim procAfterLoad as String = ""
        dim procEnableFieldsExtra as String = ""
        dim tempStr as string = ""
        Dim txtFile As new system.IO.StreamWriter(OutputPath + "\" + FilePrefix + tbl.Name + ".vb")
        if Not (ti.ProcAfterSave is nothing) then
            procAfterSave = ti.ProcAfterSave
        end if
        if Not (ti.ProcBeforeSave is nothing) then
            procBeforeSave = ti.ProcBeforeSave
        end if
        if Not (ti.ProcAfterCancel is nothing) then
            procAfterCancel = ti.ProcAfterCancel
        end if        
        if Not (ti.ProcAfterValuesUpdate is nothing) then
            procAfterValuesUpdate = ti.ProcAfterValuesUpdate
        end if  
        if Not (ti.ProcBeforeLoad is nothing) then
            procBeforeLoad = ti.ProcBeforeLoad
        end if         
        if Not (ti.ProcAfterLoad is nothing) then
            procAfterLoad = ti.ProcAfterLoad
        end if    
        if Not (ti.procEnableFieldsExtra is nothing) then
            procEnableFieldsExtra = ti.procEnableFieldsExtra
        end if    
        if Not (ti.MainTable is nothing) then
            parentTable = ti.MainTable
        end if    
        
        txtFile.WriteLine("Public Class {0}", tbl.Name)
        offSet = offSet + 3
        txtFile.WriteLine("dim dtSQLMinDate as datetime = CDate(SqlTypes.SqlDateTime.MinValue)")
        'txtFile.WriteLine(space(offSet) +"Dim dt{0} As DataTable", tbl.Name)
        txtFile.WriteLine(space(offSet) +"Dim frmIsLoading As Boolean = True")
        if Not (ti.CustomRefTables is Nothing) then
            dim tblNames() as String
            tblNames = Split(ti.CustomRefTables, "|")
            for i as Integer = 0 to tblNames.Length - 1
                txtFile.WriteLine(space(offSet) +"Dim dt{0} As DataTable = ModDB.getdt{0}()", tblNames(i))
            next
        end if
        if Not (ti.StdRefTables is Nothing) then
            dim tblNames() as String
            tblNames = Split(ti.StdRefTables, "|")
            for i as Integer = 0 to tblNames.Length - 1
                txtFile.WriteLine(space(offSet) +"Dim dtr{0} As DataTable = ModDB.getReferenceTable(" + """" + "{0}" + """" + ")", tblNames(i))
            next
        end if
        txtFile.WriteLine(space(offSet) + "Public Sub {0}_Setup(grdDetail As libUtil.ucGrid, tbl{0} as datatable, dt{1} as datatable)", tbl.Name, parentTable)
        offSet = OffSet + 3
        if procBeforeLoad <> "" then
            txtFile.WriteLine(space(offSet) + procBeforeLoad)    
        end if
        txtFile.WriteLine(space(offSet) + "grdDetail.RemoveAllColumns()" )
        dim tColumns as New DataTable("TblColumns")
        tColumns.Columns.Add(new DataColumn("Sequence", gettype(System.Int32)))
        tColumns.Columns.Add(new DataColumn("Text", gettype(System.String)))
        dim drColumn as datarow
        for each currCol as columnSchema in tbl.Columns
            drColumn = tColumns.NewRow
            try
                fld = fi.Item(currcol.Name.ToUpper)
            catch ex as Exception
                console.WriteLine("Field not found {0}, {1} Error: " + ex.ToString, tbl.Name, currcol.Name)
            end try 
            isLookup = False
            isReadOnly = False
            isHidden = False
            if not (fld.FieldType is nothing) then
                if ucase(fld.FieldType) = ucase("System") then
                    Continue For
                end if
                if ucase(fld.FieldType) = ucase("Auto") then
                    Continue For
                end if                
                if ucase(fld.FieldType) = ucase("Lookup") then
                    isLookup = True
                    strLookupTable = ucase(fld.LookupTable)
                    strDispColumn = ucase(fld.LookUpDisplay)
                    strValueColumn = ucase(fld.LookupValue)
                end if
                if ucase(fld.FieldType) = ucase("ReadOnly") then
                    isReadOnly = True
                end if
                if ucase(fld.FieldType) = ucase("Hidden") then
                    isHidden = True
                end if
            end if
            if isLookup then
                drColumn("Sequence") = fld.FldSequence
                drColumn("Text") = (space(offSet) + String.Format("grdDetail.AddColumn(libUtil.ucGrid.ColType.cCombobox, " + """" + "{0}" + """" + ", " + """" + "{1}" + """" +  ", {2}, {3}, dt{4}, " + """" + "{5}" + """" + ", " + """" + "{6}" + """" + ")", currcol.Name, fld.Description, fld.width, "False", strLookupTable, strDispColumn, strValueColumn))
                'txtFile.WriteLine((space(offSet) + String.Format("grdDetail.AddColumn(libUtil.ucGrid.ColType.cCombobox, " + """" + "{0}" + """" + ", " + """" + "{1}" + """" +  ", {2}, {3}, dt{4}, " + """" + "{5}" + """" + ", " + """" + "{6}" + """" + ")", currcol.Name, fld.Description, fld.width, "False", strLookupTable, strDispColumn, strValueColumn)))
            else if isHidden then
                drColumn("Sequence") = fld.FldSequence
                drColumn("Text") = (space(offSet) + String.Format("grdDetail.AddColumn(libUtil.ucGrid.ColType.cHidden, " + """" + "{0}" + """" + ", " + """" + "{1}" + """" +  ", {2}, {3})", currcol.Name, fld.Description, iif(currCol.Size < 0, 100, currcol.Size * 8), "True"))
                'txtFile.WriteLine((space(offSet) + String.Format("grdDetail.AddColumn(libUtil.ucGrid.ColType.cHidden, " + """" + "{0}" + """" + ", " + """" + "{1}" + """" +  ", {2}, {3})", currcol.Name, fld.Description, iif(currCol.Size < 0, 100, currcol.Size * 8), "True")))
            else if currCol.DataType = DBType.Guid and currCol.Name.Length > 4 and not isLookup then
                tempStr = currCol.Name.Substring(0, currCol.Name.Length - 4)
                drColumn("Sequence") = fld.FldSequence
                drColumn("Text") = (space(offSet) + String.Format("grdDetail.AddColumn(libUtil.ucGrid.ColType.cHidden, " + """" + "{0}" + """" + ", " + """" + "{1}" + """" + ", {2}, {3}, dt{4}, " + """" + "{5}" + """" + ", " + """" + "{6}" + """" + ")", currcol.Name, fld.Description, fld.width, "False", tempStr, "Description", "GUID"))
                'txtFile.WriteLine((space(offSet) + String.Format("grdDetail.AddColumn(libUtil.ucGrid.ColType.cHidden, " + """" + "{0}" + """" + ", " + """" + "{1}" + """" + ", {2}, {3}, dt{4}, " + """" + "{5}" + """" + ", " + """" + "{6}" + """" + ")", currcol.Name, fld.Description, fld.width, "False", tempStr, "Description", "GUID")))
            else if currCol.DataType = DBType.Int32 and currCol.Name.Length > 2 and ucase(right(currCol.Name,2)) = "ID" and not isLookup then
                tempStr = currCol.Name.Substring(0, currCol.Name.Length - 2)
                drColumn("Sequence") = fld.FldSequence
                drColumn("Text") = (space(offSet) + String.Format("grdDetail.AddColumn(libUtil.ucGrid.ColType.cHidden, " + """" + "{0}" + """" + ", " + """" + "{1}" + """" +  ", {2}, {3}, dt{4}, " + """" + "{5}" + """" + ", " + """" + "{6}" + """" + ")", currcol.Name, fld.Description, fld.width, "False", tempStr, "Description", "Id"))
                'txtFile.WriteLine((space(offSet) + String.Format("grdDetail.AddColumn(libUtil.ucGrid.ColType.cHidden, " + """" + "{0}" + """" + ", " + """" + "{1}" + """" +  ", {2}, {3}, dt{4}, " + """" + "{5}" + """" + ", " + """" + "{6}" + """" + ")", currcol.Name, fld.Description, fld.width, "False", tempStr, "Description", "Id")))
            else if currCol.DataType = DBType.String or currCol.DataType = DBType.StringFixedLength or currCol.DataType = DBType.AnsiString or  currCol.DataType = DBType.AnsiStringFixedLength then
                if isReadOnly then
                    drColumn("Sequence") = fld.FldSequence
                    drColumn("Text") = (space(offSet) + String.Format("grdDetail.AddColumn(libUtil.ucGrid.ColType.cText, " + """" + "{0}" + """" + ", " + """" + "{1}" + """" +  ", {2}, {3})", currcol.Name, fld.Description, iif(fld.width > 0, fld.width, iif(currCol.Size < 0, 100, currcol.Size * 8)), "True"))
                    'txtFile.WriteLine((space(offSet) + String.Format("grdDetail.AddColumn(libUtil.ucGrid.ColType.cText, " + """" + "{0}" + """" + ", " + """" + "{1}" + """" +  ", {2}, {3})", currcol.Name, fld.Description, iif(fld.width > 0, fld.width, iif(currCol.Size < 0, 100, currcol.Size * 8)), "True")))
                else
                    drColumn("Sequence") = fld.FldSequence
                    drColumn("Text") = (space(offSet) + String.Format("grdDetail.AddColumn(libUtil.ucGrid.ColType.cText, " + """" + "{0}" + """" + ", " + """" + "{1}" + """" +  ", {2}, {3})", currcol.Name, fld.Description,  iif(fld.width > 0, fld.width, iif(currCol.Size < 0, 100, currcol.Size * 8)), "False"))
                    'txtFile.WriteLine((space(offSet) + String.Format("grdDetail.AddColumn(libUtil.ucGrid.ColType.cText, " + """" + "{0}" + """" + ", " + """" + "{1}" + """" +  ", {2}, {3})", currcol.Name, fld.Description,  iif(fld.width > 0, fld.width, iif(currCol.Size < 0, 100, currcol.Size * 8)), "False")))
                end if
            else if currCol.DataType = DBType.Boolean then
                if isReadOnly then
                    drColumn("Sequence") = fld.FldSequence
                    drColumn("Text") = (space(offSet) + String.Format("grdDetail.AddColumn(libUtil.ucGrid.ColType.cCheckbox, " + """" + "{0}" + """" + ", " + """" + "{1}" + """" +  ", {2}, {3})", currcol.Name, fld.Description, fld.width, "True"))
                    'txtFile.WriteLine((space(offSet) + String.Format("grdDetail.AddColumn(libUtil.ucGrid.ColType.cCheckbox, " + """" + "{0}" + """" + ", " + """" + "{1}" + """" +  ", {2}, {3})", currcol.Name, fld.Description, fld.width, "True")))
                else
                    drColumn("Sequence") = fld.FldSequence
                    drColumn("Text") = (space(offSet) + String.Format("grdDetail.AddColumn(libUtil.ucGrid.ColType.cCheckbox, " + """" + "{0}" + """" + ", " + """" + "{1}" + """" +  ", {2}, {3})", currcol.Name, fld.Description, fld.width, "False"))
                    'txtFile.WriteLine((space(offSet) + String.Format("grdDetail.AddColumn(libUtil.ucGrid.ColType.cCheckbox, " + """" + "{0}" + """" + ", " + """" + "{1}" + """" +  ", {2}, {3})", currcol.Name, fld.Description, fld.width, "False")))
                end if
            else if currCol.DataType = DBType.Int32 and ucase(currCol.Name) <> "ID" then
                if isReadOnly then
                    drColumn("Sequence") = fld.FldSequence
                    drColumn("Text") = (space(offSet) + String.Format("grdDetail.AddColumn(libUtil.ucGrid.ColType.cNumber, " + """" + "{0}" + """" + ", " + """" + "{1}" + """" +  ", {2}, {3})", currcol.Name, fld.Description, fld.width, "True"))
                    'txtFile.WriteLine((space(offSet) + String.Format("grdDetail.AddColumn(libUtil.ucGrid.ColType.cNumber, " + """" + "{0}" + """" + ", " + """" + "{1}" + """" +  ", {2}, {3})", currcol.Name, fld.Description, fld.width, "True")))
                else
                    drColumn("Sequence") = fld.FldSequence
                    drColumn("Text") = (space(offSet) + String.Format("grdDetail.AddColumn(libUtil.ucGrid.ColType.cNumber, " + """" + "{0}" + """" + ", " + """" + "{1}" + """" +  ", {2}, {3})", currcol.Name, fld.Description, fld.width, "False"))
                    'txtFile.WriteLine((space(offSet) + String.Format("grdDetail.AddColumn(libUtil.ucGrid.ColType.cNumber, " + """" + "{0}" + """" + ", " + """" + "{1}" + """" +  ", {2}, {3})", currcol.Name, fld.Description, fld.width, "False")))
                end if
            else if currCol.DataType = DBType.Decimal and ucase(currCol.Name) <> "ID" then
                if isReadOnly then
                    drColumn("Sequence") = fld.FldSequence
                    drColumn("Text") = (space(offSet) + String.Format("grdDetail.AddColumn(libUtil.ucGrid.ColType.cNumber, " + """" + "{0}" + """" + ", " + """" + "{1}" + """" +  ", {2}, {3})", currcol.Name, fld.Description, fld.width, "True"))
                    'txtFile.WriteLine((space(offSet) + String.Format("grdDetail.AddColumn(libUtil.ucGrid.ColType.cNumber, " + """" + "{0}" + """" + ", " + """" + "{1}" + """" +  ", {2}, {3})", currcol.Name, fld.Description, fld.width, "True")))
                else
                    drColumn("Sequence") = fld.FldSequence
                    drColumn("Text") = (space(offSet) + String.Format("grdDetail.AddColumn(libUtil.ucGrid.ColType.cNumber, " + """" + "{0}" + """" + ", " + """" + "{1}" + """" +  ", {2}, {3})", currcol.Name, fld.Description, fld.width, "False"))
                    'txtFile.WriteLine((space(offSet) + String.Format("grdDetail.AddColumn(libUtil.ucGrid.ColType.cNumber, " + """" + "{0}" + """" + ", " + """" + "{1}" + """" +  ", {2}, {3})", currcol.Name, fld.Description, fld.width, "False")))
                end if
            else if currCol.DataType = DBType.Datetime  or currCol.DataType = DBType.DateTime2 or currCol.DataType = DbType.Date then
                if isReadOnly then
                    drColumn("Sequence") = fld.FldSequence
                    drColumn("Text") = (space(offSet) + String.Format("grdDetail.AddColumn(libUtil.ucGrid.ColType.cDateTime, " + """" + "{0}" + """" + ", " + """" + "{1}" + """" +  ", {2}, {3})", currcol.Name, fld.Description, fld.width, "True"))
                    'txtFile.WriteLine((space(offSet) + String.Format("grdDetail.AddColumn(libUtil.ucGrid.ColType.cDateTime, " + """" + "{0}" + """" + ", " + """" + "{1}" + """" +  ", {2}, {3})", currcol.Name, fld.Description, fld.width, "True")))
                else
                    drColumn("Sequence") = fld.FldSequence
                    drColumn("Text") = (space(offSet) + String.Format("grdDetail.AddColumn(libUtil.ucGrid.ColType.cDateTime, " + """" + "{0}" + """" + ", " + """" + "{1}" + """" +  ", {2}, {3})", currcol.Name, fld.Description, fld.width, "False"))
                    'txtFile.WriteLine((space(offSet) + String.Format("grdDetail.AddColumn(libUtil.ucGrid.ColType.cDateTime, " + """" + "{0}" + """" + ", " + """" + "{1}" + """" +  ", {2}, {3})", currcol.Name, fld.Description, fld.width, "False")))
                end if
            else    
                drColumn("Sequence") = fld.FldSequence
                drColumn("Text") = String.format(space(offSet) + "'Not Used: {0} of type {1}", currCol.Name, currCol.DataType)
                'txtFile.WriteLine(space(offSet) + "'Not Used: {0} of type {1}", currCol.Name, currCol.DataType)
            end if
            tColumns.Rows.Add(drColumn)
            tColumns.AcceptChanges()
        next
        
        dim idx as  integer
        for idx = 1 to fi.Count 
            fld = fi.Item(idx)
            isLookup = False
            isReadOnly = False
            isHidden = False
            if (fld.FieldType is nothing) then
                Continue For
            end if
            if not (fld.FieldType is nothing) then
                if ucase(fld.FieldType) <> ucase("Extra") then
                    Continue For
                end if
            end if
            drColumn = tColumns.NewRow
            drColumn("Sequence") = fld.FldSequence
            drColumn("Text") = (space(offSet) + String.Format("grdDetail.AddColumn(libUtil.ucGrid.ColType.cText, " + """" + "{0}" + """" + ", " + """" + "{1}" + """" +  ", {2}, {3})", fld.Description, fld.Description,  iif(fld.width > 0, fld.width, 100), "False"))
            tColumns.Rows.Add(drColumn)
            tColumns.AcceptChanges()
        next       
        
        Dim dv As New DataView(tColumns)
        dv.Sort = "Sequence"
        for each dvRow as DataRowView  in dv
            txtFile.WriteLine(dvRow("Text"))
        next    
        txtFile.WriteLine(space(offset) + "grdDetail.DetailTable = tbl{0}" , tbl.Name)
        if (ti.AddNotAllowed)  then
            txtFile.WriteLine((space(offSet) + String.Format("grdDetail.AddNotAllowed()")))
        end if   
        if (ti.DeleteNotAllowed) then
            txtFile.WriteLine((space(offSet) + String.Format("grdDetail.DeleteNotAllowed()")))
        end if            
        if (ti.editnotallowed)  then
            txtFile.WriteLine((space(offSet) + String.Format("grdDetail.EditNotAllowed()")))
        end if            
        if procAfterLoad <> "" then
            txtFile.WriteLine(space(offSet) + procAfterLoad)    
        end if
        txtFile.WriteLine(space(offSet) + "frmIsLoading = False")
        offSet = OffSet - 3
        txtFile.WriteLine(space(offSet) + "End Sub")
        offSet = offSet - 3
        txtFile.WriteLine(space(offSet) + "End Class")
        txtFile.Close()
Next
%>

'All work done !!


<script runat="template">
' My functions here.
private templateOutputPath as string = ""
	<Editor(GetType(System.Windows.Forms.Design.FolderNameEditor), GetType(System.Drawing.Design.UITypeEditor)), _
	Category("01. Getting Started - Required"), Description("Required - The directory to which every output file is generated.")> _
public property OutputPath as string
   get 
		return templateOutputPath
		end get
	set(val as string)
		templateOutputPath = val
		end set
end property



</script>
